/*
 * client.cfg
 *
 * Memory Map and Program intiializations for the client example Utility
 *
 * Copyright (C) 2010-2011 Texas Instruments Incorporated - http://www.ti.com/ 
 *  
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/*
 *   @file  client.cfg
 *
 *   @brief   
 *      Memory Map and Program intiializations for the HPDSP Utility.
 *
 */
 
/********************************************************************************************************************
*  Specify all needed RTSC Moudles and ocnfigure them.																*
********************************************************************************************************************/
var Memory  =   xdc.useModule('xdc.runtime.Memory');

var BIOS    =   xdc.useModule('ti.sysbios.BIOS');
var Task    =   xdc.useModule('ti.sysbios.knl.Task');
var HeapBuf =   xdc.useModule('ti.sysbios.heaps.HeapBuf');

var EventCombiner = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
/*-----2016-6-29,hxl added the following BIOS modules from the SRIO project-----*/

var CPINTC  = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Idle    = xdc.useModule('ti.sysbios.knl.Idle');
var Log     = xdc.useModule('xdc.runtime.Log');
var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');

/*---end--2016-6-29,hxl added the following BIOS modules from the SRIO project-----*/
/*
** Allow storing of task names. By default if you name a task with a friendly display name it will not be saved
** to conserve RAM. This must be set to true to allow it. We use friendly names on the Task List display.
*/
//Defaults.common$.namedInstance = true; 
Task.common$.namedInstance = true;
var Clock   =   xdc.useModule ('ti.sysbios.knl.Clock');
/* 
** Interface with IPC. Depending on the version of BIOS you are using the 
** module name may have changed.*/
/* Use this for pre BIOS 6.30 */
/* var Sem	    =	  xdc.useModule ('ti.sysbios.ipc.Semaphore'); */
/* Use this for BIOS 6.30 plus to get the IPC module */
var Sem	= xdc.useModule ('ti.sysbios.knl.Semaphore');
var Hwi	= xdc.useModule ('ti.sysbios.hal.Hwi');
/*
** Configure this to turn on the CPU Load Module for BIOS.**/
/*
var Load       =   xdc.useModule('ti.sysbios.utils.Load');
Load.common$.diags_USER4 = Diags.ALWAYS_ON;
*/
var Diags       = xdc.useModule('xdc.runtime.Diags');

/* Load the CSL package */
var Csl 					    = 	xdc.useModule('ti.csl.Settings');
/* Load the CPPI package */
var Cppi                        =   xdc.loadPackage('ti.drv.cppi');     
/* Load the QMSS package */
var Qmss                        =   xdc.loadPackage('ti.drv.qmss');
/* Load the PA package */
var Pa 							= 	xdc.useModule('ti.drv.pa.Settings');

/*--2016-6-29 hxl: added the following from the SRIO project--------------------*/
/* Load and use the  SRIO packages */
var Srio = xdc.loadPackage('ti.drv.srio'); 

/* Load and use the System Package */
var System = xdc.useModule('xdc.runtime.System');
/* Required if using System_printf to output on the console */
SysStd  = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

var Ipc          = xdc.useModule('ti.sdo.ipc.Ipc');
var Settings     = xdc.module('ti.sdo.ipc.family.Settings');
var ListMP       = xdc.useModule('ti.sdo.ipc.ListMP');
var GateMP       = xdc.useModule('ti.sdo.ipc.GateMP');
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
var HeapMemMP    = xdc.useModule('ti.sdo.ipc.heaps.HeapMemMP');
var MultiProc    = xdc.useModule('ti.sdo.utils.MultiProc');
var Notify      = xdc.useModule('ti.sdo.ipc.Notify');

var Types=xdc.useModule('xdc.runtime.Types');


// Configure the shared memory heap for shared memory allocations required by the
 // CPPI and QMSS Libraries ///
SharedRegion.translate = false;

var memmap = Program.cpu.memoryMap;

//Startup = xdc.useModule('xdc.runtime.Startup');//hxl deleted
//Startup.firstFxns.$add('&myStartupFxn');//hxl deleted
MultiProc.setConfig(null, ["CORE0", "CORE1", "CORE2", "CORE3", "CORE4", "CORE5", "CORE6", "CORE7"]);

/* To avoid wasting shared memory for MessageQ transports */

for (var i = 0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
       // setupNotify: true,
        setupMessageQ: false,
    });
}

/* Synchronize all processors (this will be done in Ipc_start) */
//Ipc.procSync = Ipc.ProcSync_ALL;
Ipc.procSync = Ipc.ProcSync_PAIR

/* 
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */ 
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
//SharedRegion.numEntries = 4; // 鏈�澶у叡浜尯鍩熺殑鏁扮洰
//SharedRegion.translate = true; // 鏄惁闇�瑕佽繘琛屽湴鍧�杞崲

/* Shared Memory base address and length */
//var SHAREDMEM           = 0xa0200000;
//var SHAREDMEMSIZE       = 0x00160000;
var SHAREDMEM           = 0x0C100000;
var SHAREDMEMSIZE       = 0x00080000;

SharedRegion.setEntryMeta(0,  // 鍖哄煙ID
    { base: SHAREDMEM,        // 鍩哄湴鍧�
      len:  SHAREDMEMSIZE,    // 鍖哄煙澶у皬
      ownerProcId: 0,         // 鎵�鏈夎�呯殑鏍窱D
      isValid: true,          // 瀵逛簬褰撳墠鏍革紝璇ュ尯鍩熸槸鍚︽湁鏁�
      name: "DDR2_RAM",       // 鍖哄煙鍚嶇О
    });

/*
MultiProc.setConfig(null, ["CORE0", "CORE1"]);

// Synchronize all processors (this will be done in Ipc_start) //
Ipc.procSync = Ipc.ProcSync_ALL;

// To avoid wasting shared memory for Notify and MessageQ transports //
for (var i = 0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
        setupNotify: false,
        setupMessageQ: false,
    });
}

// Create a shared memory //hxl:娉ㄦ剰杩欎竴娈靛畾涔�
SharedRegion.setEntryMeta(0,
    { base: 0x0C000000,
      len: 0x00010000,
      ownerProcId: 0,
      isValid: true,
      name: "sharemem",
    });
*/

//-end-----2016-6-29 hxl: added the following from the SRIO project--------------------//


/* Load the Platform/NDK Transport packages */
var PlatformLib  = xdc.loadPackage('ti.platform.evmc6678l');
var NdkTransport = xdc.loadPackage('ti.transport.ndk');

/* 
** Sets up the exception log so you can read it with ROV in CCS 
*/
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Exc = xdc.useModule('ti.sysbios.family.c64p.Exception');
Exc.common$.logger = LoggerBuf.create();
Exc.enablePrint = true; /* prints exception details to the CCS console */


/*
**  Give the Load module it's own LoggerBuf to make sure the
**  events are not overwritten.
*/
/* var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.exitFlush = true;
loggerBufParams.numEntries = 64;
Load.common$.logger = LoggerBuf.create(loggerBufParams); 
*/

/*
** Use this load to configure NDK 2.2 and above using RTSC. In previous versions of
** the NDK RTSC configuration was not supported and you should comment this out.
*/
var Global       = xdc.useModule('ti.ndk.config.Global');

/* 
** This allows the heart beat (poll function) to be created but does not generate the stack threads 
**
** Look in the cdoc (help files) to see what CfgAddEntry items can be configured. We tell it NOT
** to create any stack threads (services) as we configure those ourselves in our Main Task
** thread hpdspuaStart.
*/  
Global.enableCodeGeneration = false;
//Cache.MAR224_255 = 0x0000000f;

//var Startup     =   xdc.useModule('xdc.runtime.Startup');//hxl deleted for combine
var System      =   xdc.useModule('xdc.runtime.System');
Program.heap =0x50000;//hxl 娣诲姞锛屾簮浜庝俊鍙峰鐞嗙畻娉�"0phaseFilter_EnvExtract"
/*
** Create a Heap. 
*/

var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
//heapMemParams.size =0x100000;
heapMemParams.size =0x400000;// 0x100000;//2017-10-23 hxl modified from 0x100000 to 0x101000
heapMemParams.sectionName = "systemHeap2";
Program.global.heap0 = HeapMem.create(heapMemParams);
// This is the default memory heap. //
//Memory.defaultHeapInstance  =   Program.global.heap0;//hxl:璋冪敤Memory_alloc鐨勬椂鍊欐寚瀹氳繖涓爢鐨勫悕瀛楋紝灏变粠杩欎釜鍫嗕笂鍒嗛厤鍐呭瓨銆�
Program.sectMap["systemHeap2"] = Program.platform.stackMemory;

/*
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams1 = new HeapMem.Params();
heapMemParams1.size = 32768+32768;//hxl modified
heapMemParams1.sectionName = "systemHeap1";
Program.global.heap1 = HeapMem.create(heapMemParams1);
// This is the default memory heap. //
Memory.defaultHeapInstance  =   Program.global.heap1;//hxl:璋冪敤Memory_alloc鐨勬椂鍊欐寚瀹氳繖涓爢鐨勫悕瀛楋紝灏变粠杩欎釜鍫嗕笂鍒嗛厤鍐呭瓨銆�
Program.sectMap["systemHeap1"] = Program.platform.stackMemory;
*/

Program.sectMap["sharedL2"] = "DDR3"; 
Program.sectMap["systemHeap2"]  = "DDR3";
Program.sectMap["systemHeap"]  = "L2SRAM";
//Program.sectMap["systemHeap1"]  = "L2SRAM";//hxl:added it
Program.sectMap[".args"]    = "DDR3";
Program.sectMap[".cio"]     = "L2SRAM";
//Program.sectMap[".far"] 	= 	"DDR3";
Program.sectMap[".far"] 	= 	"L2SRAM";
Program.sectMap[".rodata"] 	= 	"L2SRAM";
Program.sectMap[".neardata"]= 	"L2SRAM";
Program.sectMap[".cppi"] 	= 	"DDR3";
Program.sectMap[".init_array"] 	= 	"DDR3";
Program.sectMap[".qmss"] 	= 	"DDR3";
Program.sectMap[".cinit"] 	= 	"DDR3";
Program.sectMap[".bss"]		=	"L2SRAM";
Program.sectMap[".const"]	=	"DDR3";
Program.sectMap[".text"]	=	"DDR3";
Program.sectMap[".code"]	=	"DDR3";
Program.sectMap[".switch"]	=	"DDR3";
Program.sectMap[".data"]	=	"DDR3";
Program.sectMap[".fardata"] = 	"L2SRAM";
Program.sectMap[".args"] 	= 	"DDR3";
Program.sectMap[".vecs"] 	= 	"DDR3";
Program.sectMap["platform_lib"] 	= 	"DDR3";
Program.sectMap[".DbgSection"]  = "DDR3";
Program.sectMap[".far:taskStackSection"] = "L2SRAM";
//Program.sectMap[".taskStackSection"] = "L2SRAM";
Program.sectMap[".stack"]	=	"L2SRAM";
Program.sectMap[".nimu_eth_ll2"] = "L2SRAM";
Program.sectMap[".resmgr_memregion"] = {loadSegment: "L2SRAM", loadAlign:128};	/* QMSS descriptors region 	*/
Program.sectMap[".resmgr_handles"] = {loadSegment: "L2SRAM", loadAlign:16};	/* CPPI/QMSS/PA Handles			*/
Program.sectMap[".resmgr_pa"]	= {loadSegment: "L2SRAM", loadAlign:8};		/* PA Memory					*/
Program.sectMap[".far:IMAGEDATA"] = {loadSegment: "L2SRAM", loadAlign: 8};
Program.sectMap[".far:NDK_OBJMEM"] = {loadSegment: "L2SRAM", loadAlign: 8};
Program.sectMap[".far:NDK_PACKETMEM"] = {loadSegment: "MSMCSRAM", loadAlign: 128};
//-------hxl:memory and sections--------------------------------

//-----2016-6-29--hxl:memory and sections from SRIO project--------------------------------

//-----hxl:these segments are from file loopbackDioIsr.cmd--
Program.sectMap[".init_array"] 	= 	"DDR3";
Program.sectMap[".srioSharedMem"] 	= 	"DDR3";
//---end--hxl:these segments are from file loopbackDioIsr.cmd---

//---------娴嬭瘯鎵�浣跨敤鐨勬枃浠舵暟鎹�-----------

Program.sectMap[".fpgaData0"] = new Program.SectionSpec();//hxl:ping buffer
Program.sectMap[".fpgaData0"].fill = 255;//hxl:鍒濆鍊�
Program.sectMap[".fpgaData0"].loadAddress = 0x0c010000;//hxl:FPGA缁廠RIO鍙戦�佹潵鐨勬暟鎹瓺IO鍦板潃

Program.sectMap[".fpgaData1"] = new Program.SectionSpec();//hxl:pong buffer
Program.sectMap[".fpgaData1"].fill = 255;//hxl:鍒濆鍊�
Program.sectMap[".fpgaData1"].loadAddress = 0x0c020000;//hxl:FPGA缁廠RIO鍙戦�佹潵鐨勬暟鎹瓺IO鍦板潃

/*--this section is used for test---*/
Program.sectMap[".dataValidtest"] = new Program.SectionSpec();
Program.sectMap[".dataValidtest"].fill = 255;//hxl:鍒濆鍊�
Program.sectMap[".dataValidtest"].loadAddress = 0x0c030000;//hxl:FPGA缁廠RIO鍙戦�佹潵鐨勬暟鎹瓺IO鍦板潃

Program.sectMap[".sharedVar"] = new Program.SectionSpec();
Program.sectMap[".sharedVar"].loadSegment = "MSMCSRAM";
Program.sectMap[".sharedVar"].loadAlign = 128;

Program.sectMap[".sharedVar1"] = new Program.SectionSpec();
Program.sectMap[".sharedVar1"].loadSegment = "DDR3";
Program.sectMap[".sharedVar1"].loadAlign = 128;//

Program.sectMap[".PCParasVars"] = new Program.SectionSpec();
Program.sectMap[".PCParasVars"].loadSegment = "L2SRAM";
Program.sectMap[".PCParasVars"].loadAlign = 8;//

Program.sectMap[".csl_vect"] 	= 	"DDR3";//hxl added this line 2017-5-11

Program.sectMap[".filterVars"] = new Program.SectionSpec();
Program.sectMap[".filterVars"].loadSegment = "MSMCSRAM";//2017-11-10 hxl modified
Program.sectMap[".filterVars"].loadAlign = 8;//

Program.sectMap[".filterVars1"] = new Program.SectionSpec();
Program.sectMap[".filterVars1"].loadSegment = "DDR3";
Program.sectMap[".filterVars1"].loadAlign = 8;//

Program.sectMap[".FFTVars"] = new Program.SectionSpec();
Program.sectMap[".FFTVars"].loadSegment = "DDR3";
Program.sectMap[".FFTVars"].loadAlign = 8;//

Program.sectMap[".shared"] = new Program.SectionSpec();
Program.sectMap[".shared"].loadSegment = "MSMCSRAM";
Program.sectMap[".shared"].loadAlign = 8;




/*
Program.sectMap[".switch"] = new Program.SectionSpec();
Program.sectMap[".switch"].loadSegment = "L2SRAM";
*/				
//--end---2016-6-29--hxl:memory and sections from SRIO project--------------------------------


//----ended---hxl:memory and sections--------------------------------
/* Required if using System_printf to output on the console */
//SysStd          		=   xdc.useModule('xdc.runtime.SysStd');
//System.SupportProxy     =   SysStd;

/********************************************************************************************************************
* Define hooks and static tasks  that will always be running.               										*
 ********************************************************************************************************************/

/* 
** Register an EVM Init handler with BIOS. This will initialize the hardware. BIOS calls before it starts. 
**
** If yuo are debugging with CCS, then this function will execute as CCS loads it if the option in your 
** Target Configuraiton file (.ccxml) has the option set to execute all code before Main. That is the 
** default.
*/
Startup = xdc.useModule('xdc.runtime.Startup');//hxl 
Startup.firstFxns.$add('&myStartupFxn');//2016-6-29 
Startup.lastFxns.$add('&EVM_init');

/* 
** Create the stack Thread Task for our application.
*/
var tskNdkStackTest  		=   Task.create("&StackTest");
tskNdkStackTest.stackSize  	= 	0x1400;//hxl:a multiple of 4 bytes should be sufficient
tskNdkStackTest.priority    = 	0x05;//0x5;2016-6-30 hxl modified from 6 to 5
/*========================================================================================================
// the following tasks are added by hxl
=========================================================================================================*/
/*var tskNdkTask1 = Task.create("&ProcessingTask");//2016-7-6 hxl deleted it for test
tskNdkTask1.stackSize = 0x400;//0x800;hxl:2016-7-6 褰撹涓�0x800鏃讹紝杩愯鍑洪敊锛屽嚭鐜板唴閮ㄥ紓甯搞��
tskNdkTask1.priority = 0x04;//0x4; 2016-6-30 hxl modified
tskNdkTask1.instance.name = "ProcessingTask";//鎸囨槑涓荤嚎绋嬪搴旂殑鍑芥暟 //2016-7-6 hxl for test*/


/* Enable BIOS Task Scheduler */
BIOS.taskEnabled			=   true;


/* Define and add two Hwi HookSets
* Notice, no deleteFxn is provided.
*/

//---------------鍒涘缓杞腑鏂�--------------------------------
/*var Swi = xdc.useModule('ti.sysbios.knl.Swi');

var swi0Params = new Swi.Params();
swi0Params.instance.name = "swi_handle0";
swi0Params.priority = 30;
Program.global.swi_handle0 = Swi.create("&beforeProcessSwi", swi0Params);
Swi.numPriorities = 32;
*/
EventCombiner.eventGroupHwiNum[0] = 7;//10;//7;//2016-7-29 hxl modified it to 10
EventCombiner.eventGroupHwiNum[1] = 8;
EventCombiner.eventGroupHwiNum[2] = 9;
EventCombiner.eventGroupHwiNum[3] =6; //10;//2016-7-29 hxl modified it to 7
Program.stack = 9216;// 9216;//9216;//8192;//system stack size (榛樿鏄�4096) hxl added 2015-10-27.榛樿鐨勪綅浜嶭2SRAM浣嶄簬
Clock.tickPeriod = 1000;//hxl:1000-->100;鍗曚綅锛歶s
Task.enableIdleTask = true;//false;//hxl:2016-8-2 hxl added
Global.debugPrintLevel = Global.DBG_NONE;
Global.debugAbortLevel = Global.DBG_NONE;
//Idle.idleFxns[0] = "&CheckSRIOPort_idle_task";

